'use strict';
$(document).ready(function(){

    var findBootstrapEnvironment = function() {
        var envs = ['xs', 'sm', 'md', 'lg'];

        var el = $('<div>');
        el.appendTo($('body'));

        for (var i = envs.length - 1; i >= 0; i--) {
            var env = envs[i];

            el.addClass('hidden-'+env);
            if (el.is(':hidden')) {
                el.remove();
                return env
            }
        };
    }

    var env;
    var panels = function(){
      var ho = 45;
      var h = $(window).height() - ho;
      env = findBootstrapEnvironment();
      
      $('#side, #content').css({
          'height': h+'px',
          'top': ho+'px'
      });

      $('.ps-scroller')
          .perfectScrollbar();

    }



    panels();
    $(window).resize(function(){
        panels();
    });

    setTimeout(function(){
      $('.github-btn-con').removeClass('hide');
      $('.github-btn-con').css("margin-top","8px");
    }, 1200);


    // Start as collapsed for small devices
    if(env === 'xs' || env === 'sm'){
        $("#side").toggleClass('do-collapse');
    }

    $('a.collapser').click(function(e){
        e.preventDefault();
        e.stopPropagation();
        $("#side").toggleClass('do-collapse');
        if($("#side").hasClass('do-collapse')){
            //$("#side").width('40px');
            $("#content").innerWidth(($(window).width()-41)+'px');
            if(env === 'xs' || env === 'sm'){
                $("#side").css('z-index', '1');
                //$("#content").css('left', '');
            }
            //console.info($("#content").width(), $(window).width()-41);
        } else {
            $("#side").width('');
            $("#content").width('');
            if(env === 'xs' || env === 'sm'){
                $("#side").css('z-index', '3');
                //$("#content").css('left', '260px');
            }
        }
    });
    
});

/**
 * @ngdoc overview
 * @name anyandgoApp
 * @description
 * # anyandgoApp
 *
 * Main module of the application.
 */
angular
  .module('anyandgoApp', [
    'ngAnimate',
    'ngCookies',
    'ngResource',
    'ngRoute',
    'ngSanitize',
    'ngTouch',
    'youtube-embed',
    'cfp.hotkeys',
    'restangular'
  ])
  .config(function ($routeProvider, $locationProvider, RestangularProvider, hotkeysProvider) {

    // Hotkeys killswitch
    // see https://github.com/chieffancypants/angular-hotkeys#configuration
    hotkeysProvider.includeCheatSheet = true;

    //$locationProvider.html5Mode(true).hashPrefix('!');
    //$cookies.lang = "en-us";
    /*
    $routeProvider
      .when('/', {
        templateUrl: '/scripts/admin/views/main.html',
        controller: 'MainCtrl'
      })
      .otherwise({
        redirectTo: '/'
      }); */
  }).run(function ($rootScope, $location, $route, $timeout, $http, $cookies, $anchorScroll, youtubeEmbedUtils) {

    /*
    */

    $rootScope.config = {};
    $rootScope.config.app_url = $location.url();
    $rootScope.config.app_path = $location.path();
    $rootScope.layout = {};
    $rootScope.layout.loading = false;
      
    //$anchorScroll.yOffset = 50;

    $rootScope.gotoAnchor = function(x) {
      var newHash = x;
      if ($location.hash() !== newHash) {
        // set the $location.hash to `newHash` and
        // $anchorScroll will automatically scroll to it
        $location.hash(x);
      } else {
        // call $anchorScroll() explicitly,
        // since $location.hash hasn't changed
        $anchorScroll();
      }
    }; 

    // Videos
    // $rootScope.modalPlayer = {};
    $rootScope.modalVideo = '';

    $rootScope.openVideoModal = function(video){
      //
      // var id = youtubeEmbedUtils.getIdFromURL(video.url);
      $rootScope.modalVideo = video;
      $('#modalViewVideo').modal('show');
    }


    $rootScope.closeVideoModal = function(video){
      // Stop video
      $rootScope.modalPlayer.stopVideo();
    }

    $('#modalViewVideo').on('hidden.bs.modal', function () {
      $rootScope.modalPlayer.stopVideo();
    });

    
    if(!navigator.userAgent.match(/Zombie/)) {

    $rootScope.$on('$routeChangeStart', function () {
        console.log('$routeChangeStart');
        //show loading gif
        $timeout(function(){
          $rootScope.layout.loading = true;          
        });
    });
    $rootScope.$on('$routeChangeSuccess', function () {
        console.log('$routeChangeSuccess');
        //hide loading gif
        $timeout(function(){
          $rootScope.layout.loading = false;
        }, 200);
    });
    $rootScope.$on('$routeChangeError', function () {

        //hide loading gif
        console.log('error');
        $rootScope.layout.loading = false;

    });

    }

  });


'use strict';

/**
 * @ngdoc function
 * @name anyandgoApp.controller:MainCtrl
 * @description
 * # MainCtrl
 * Controller of the anyandgoApp
 */
angular.module('anyandgoApp')
  .controller('MainCtrl', function ($scope) {
    $scope.anyandgoversion = 'v0.1';
  });

'use strict';

/**
 * @ngdoc function
 * @name anyandgoApp.controller:AboutCtrl
 * @description
 * # AboutCtrl
 * Controller of the anyandgoApp
 */
angular.module('anyandgoApp')
  .controller('AboutCtrl', function ($scope) {
    $scope.awesomeThings = [
      'HTML5 Boilerplate',
      'AngularJS',
      'Karma'
    ];
  });

'use strict';

/**
 * @ngdoc function
 * @name anyandgoApp.controller:SampleCtrl
 * @description
 * # SampleCtrl
 * Controller of the anyandgoApp
 */
angular.module('anyandgoApp')
  .controller('SampleCtrl', function ($scope, Restangular) {
   $scope.samples = Restangular.all("samples").getList().$object;
  });

'use strict';

/**
 * @ngdoc function
 * @name anyandgoApp.controller:SampleNewCtrl
 * @description
 * # SampleNewCtrl
 * Controller of the anyandgoApp
 */
angular.module('anyandgoApp')
  .controller('SampleNewCtrl', function ($scope, $location, Restangular) {
  $scope.save = function() {
    Restangular.all('samples').post($scope.sample).then(function(sample) {  
      if(navigator.userAgent.match(/Zombie/)) {
          document.location.hash = "#/crud/sample";
      } else {
        $location.path('/crud/sample');
      }
    });
  }
});

'use strict';

/**
 * @ngdoc function
 * @name anyandgoApp.controller:SampleEditCtrl
 * @description
 * # SampleEditCtrl
 * Controller of the anyandgoApp
 */
angular.module('anyandgoApp')
  .controller('SampleEditCtrl', function ($scope, $location, Restangular, sample) {
  var original = sample;
  $scope.sample = Restangular.copy(original);
  

  $scope.isClean = function() {
    return angular.equals(original, $scope.sample);
  }

  $scope.destroy = function() {
    original.remove().then(function() {
      if(navigator.userAgent.match(/Zombie/)) {
          document.location.hash = "#/crud/sample";
      } else {
        $location.path('/crud/sample');
      }
    });
  };

  $scope.save = function() {
    $scope.sample.put().then(function() {
      if(navigator.userAgent.match(/Zombie/)) {
          document.location.hash = "#/crud/sample";
      } else {
        $location.path('/crud/sample');
      }
    });
  };
});

'use strict';

function setCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays*24*60*60*1000));
    var expires = "expires="+d.toUTCString();
    document.cookie = cname + "=" + cvalue + "; " + expires;
}
/**
 * @ngdoc directive
 * @name anyandgoApp.directive:langsupport
 * @description
 * # langsupport
 */
angular.module('anyandgoApp')
  .directive('langsupport', ['$cookieStore', '$cookies', '$window',
                             function ($cookieStore, $cookies, $window) {
    return {
      restrict: 'A',
      link: function($scope, element, attrs, ctrl) {
        element.on("click", function () {
          $cookieStore.put("lang", attrs.langsupport);
          //console.log($cookieStore.get("lang"), "<--");
          //console.log($browser, $browser.cookies(), "<<<a");
          // Angular cookie crap doesn't work
          // http://stackoverflow.com/questions/20246230/when-is-angularjs-cookiestore-updated-with-new-cookie
          setCookie("lang",attrs.langsupport, 2);
          $window.location.reload();
        });
        //console.log(scope, element, attrs);
        //$(element).metisMenu(scope.$eval(attrs.toolbarTip));
      }
    };
  }]);

'use strict';

/**
 * @ngdoc directive
 * @name anyandgoApp.directive:metismenu
 * @description
 * # metismenu
 */
angular.module('anyandgoApp')
  .directive('metismenu', function () {
    return {
      restrict: 'A',
      link: function postLink(scope, element, attrs) {
        $(element).metisMenu(scope.$eval(attrs.toolbarTip));
      }
    };
  });

'use strict';

/**
 * @ngdoc directive
 * @name anyandgoApp.directive:hero
 * @description
 * # hero
 */
angular.module('anyandgoApp')
  .directive('hero', function () {
    return {
      restrict: 'A',
      link: function postLink($scope, element, attrs) {
        //$(element).metisMenu(scope.$eval(attrs.toolbarTip));
        $scope.carousel = $(element).carousel();

        $scope.doAnimations = function (elems) {
          // http://www.sitepoint.com/bootstrap-carousel-with-css3-animations/
          var animEndEv = 'webkitAnimationEnd animationend';
          
          elems.each(function () {
            var $this = $(this),
                $animationType = $this.data('animation');

            // Add animate.css classes to
            // the elements to be animated 
            // Remove animate.css classes
            // once the animation event has ended
            $this.addClass($animationType).one(animEndEv, function () {
              $this.removeClass($animationType);
            });
          });
        }

        // Animate the first time
        var $animatingElems = $($scope.carousel)
                            .find("[data-animation ^= 'animated']");
        $scope.doAnimations($animatingElems);

        $scope.carousel.on('slide.bs.carousel', function (e) { 
          // Select the elements to be animated inside the active slide 
          var $animatingElems = $(e.relatedTarget)
                                .find("[data-animation ^= 'animated']");
          $scope.doAnimations($animatingElems);
        });
      }
    };
  });
